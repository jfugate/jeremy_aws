{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "ASG and ELB",

  "Parameters": {
    "IsMultiAZStack": {
      "Description":"Determines whether this ASG is configured for a single Availability Zone ('False') or multiple Availability Zones ('True').",
      "Type":"String",
      "Default":"True",
      "AllowedValues" : ["True", "False"],
      "ConstraintDescription": "Must be 'True' or 'False'."
    },
    "IsELBInternal": {
      "Description": "Will this ELB be internal? ('True' for internal or 'False' for internet-facing')",
      "Type": "String",
      "Default": "False",
      "AllowedValues" : ["True", "False"],
      "ConstraintDescription": "Must be 'True' or 'False'."
    },
    "UseELBCookieStickinessPolicy": {
      "Description": "Will this ELB have a cookie stickiness policy? ('True' for internal or 'False' for internet-facing')",
      "Type": "String",
      "Default": "False",
      "AllowedValues" : ["True", "False"],
      "ConstraintDescription": "Must be 'True or 'False'."
    },
    "ELBStickySessionLength": {
      "Description": "The time period, in seconds, after which the cookie should be considered stale. If this parameter isn't specified, the sticky session will last for the duration of the browser session.",
      "Type": "Number",
      "Default": "1",
      "ConstraintDescription": "Must be a positive integer."
    },
    "Role": {
      "Description": "Name which will be applied to EC2 instances in the ASG (e.g. 'web' or 'app').",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a string."
    },
    "Environment": {
      "Description": "Environment name assigned to EC2 instances (e.g. 'prod' or 'test').",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a string."
    },
    "Release" : {
      "Description" : "Release Number",
      "Type" : "String",
      "Default" : "0.0.1"
    },
    "InstanceType": {
      "Description": "The EC2 instance type assigned to the Launch Configuration for EC2 instances in the ASG.",
      "Type": "String",
      "Default": "t2.small",
      "ConstraintDescription": "Must be a string."
    },
    "AMI": {
      "Description": "The AMI ID assigned to the Launch Configuration for EC2 instances in the ASG.",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a string."
    },
    "BootstrapFileName": {
      "Description": "The config file name",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a string."
    },
    "AssociatePublicIPAddress": {
      "Description": "Whether or not the EC2 instances in the ASG will be given a public IP address.",
      "Type": "String",
      "Default": "False",
      "AllowedValues" : ["True", "False"],
      "ConstraintDescription": "Must be 'True' or 'False'."
    },
    "ASGHealthCheckType": {
      "Description": "Health check type for the ASG.",
      "Type": "String",
      "Default": "EC2",
      "AllowedValues" : ["EC2", "ELB"],
      "ConstraintDescription": "Must be 'EC2' or 'ELB'."
    },
    "HealthCheckGracePeriod": {
      "Description": "The length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health.",
      "Type": "Number",
      "Default": "300",
      "MinValue": "1",
      "ConstraintDescription": "Must be an integer."
    },
    "MaxInstancesCount": {
      "Description": "Maximum number of EC2 instances in the ASG.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "0",
      "MaxValue": "10000"
    },
    "MinInstancesCount": {
      "Description": "Minimum number of EC2 instances in the ASG.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "0",
      "MaxValue": "1000"
    },
    "ScaleUpAdjustment": {
      "Description": "Number off EC2 instances to add when scaling up.",
      "Type": "Number",
      "Default": "2"
    },
    "ScaleUpCooldown": {
      "Description": "Number of seconds for cooldown between scale-up events.",
      "Type": "Number",
      "Default": "300"
    },
    "ScaleDownAdjustment": {
      "Description": "Number of EC2 instances to remove when scaling down.",
      "Type": "String",
      "Default": "-2"
    },
    "ScaleDownCooldown": {
      "Description": "Number of seconds for cooldown between scale-down events.",
      "Type": "Number",
      "Default": "300"
    },
    "HighCPUThreshold": {
      "Description": "Average CPU threshold for scaling up EC2 instances in ASG. (Greater than or equal to)",
      "Type": "Number",
      "Default": "75",
      "MinValue": "1"
    },
    "HighCPUPeriod": {
      "Description": "The time over which the specified statistic is applied. You must specify a time in seconds that is also a multiple of 60.",
      "Type": "Number",
      "Default": "60",
      "MinValue": "60",
      "ConstraintDescription": "Must be an integer that is a multiple of 60."
    },
    "LowCPUThreshold": {
      "Description": "Average CPU threshold for scaling down EC2 instances in ASG. (Less than or equal to)",
      "Type": "Number",
      "Default": "25",
      "MinValue": "1"
    },
    "LowCPUPeriod": {
      "Description": "The time over which the specified statistic is applied. You must specify a time in seconds that is also a multiple of 60.",
      "Type": "Number",
      "Default": "60",
      "MinValue": "60",
      "ConstraintDescription": "Must be an integer that is a multiple of 60."
    },
    "RollingUpdateMinInstancesInService": {
      "Description": "Minimum number of EC2 instances to remain in service during rolling update.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "10000"
    },
    "RollingUpdateMaxBatchSize": {
      "Description": "Maximum number of EC2 instances for batch during rolling update.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "10000"
    },
    "RollingUpdatePauseTime": {
      "Description": "Amount of time to pause before adding or removing autoscaling instances during rolling update.",
      "Type": "String",
      "Default": "PT0M30S"
    },
    "HealthCheckTarget": {
      "Description": "Location to check for health. (e.g. 'HTTP:80/' or 'TCP:80')",
      "Type": "String",
      "Default": "HTTP:80/",
      "ConstraintDescription": "Must be a string."
    },
    "ELBConnectionDrainingTimeout": {
      "Description": "The ELB will close all connections to a deregistered or unhealthy EC2 instance after this many seconds.",
      "Type": "Number",
      "Default": "120",
      "MinValue": "1",
      "MaxValue": "3600",
      "ConstraintDescription": "Must be an integer."
    },
    "ELBListenerProtocol": {
      "Description": "[First] listener protocol for the ELB.",
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"]
    },
    "ELBListenerProtocol2": {
      "Description": "[Second] listener protocol for the ELB.",
      "Type": "String",
      "Default": "",
      "AllowedValues": ["", "HTTP", "HTTPS", "TCP", "SSL", ""]
    },
    "ELBListenerPort": {
      "Description": "[First] listener port for the ELB.",
      "Type": "Number",
      "Default": "80",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "ELBListenerPort2": {
      "Description": "[Second] listener port for the ELB.",
      "Type": "Number",
      "Default": "443",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "InstanceListenerProtocol": {
      "Description": "[First] listener protocol for the EC2 instance.",
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"]
    },
    "InstanceListenerProtocol2": {
      "Description": "[Second] listener protocol for the EC2 instance.",
      "Type": "String",
      "Default": "",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL", ""]
    },
    "InstanceListenerPort": {
      "Description": "[First] listener port for the EC2 instance.",
      "Type": "Number",
      "Default": "80",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "InstanceListenerPort2": {
      "Description": "[Second] listener port for the EC2 instance.",
      "Type": "Number",
      "Default": "443",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "ELBListenerCert": {
      "Description": "The ARN of the SSL certificate to use for the [first] ELB listener.",
      "Type": "String",
      "Default": ""
    },
    "ELBListenerCert2": {
      "Description": "The ARN of the SSL certificate to use for the [second] ELB listener.",
      "Type": "String",
      "Default": ""
    },
    "ELBHealthyThreshold": {
      "Description": "Specifies the number of consecutive health probe successes required before moving the instance to the healthy state.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "2",
      "MaxValue": "10",
      "ConstraintDescription": "Must be an integer between 2 and 10."
    },
    "ELBUnhealthyThreshold": {
      "Description": "Specifies the number of consecutive health probe failures required before moving the instance to the healthy state.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "2",
      "MaxValue": "10",
      "ConstraintDescription": "Must be an integer between 2 and 10."
    },
    "ELBIntervalThreshold": {
      "Description": "Amount of time between health checks (between 5 and 300 seconds).",
      "Type": "Number",
      "Default": "10",
      "MinValue": "5",
      "MaxValue": "300",
      "ConstraintDescription": "Must be an integer between 5 and 300."
    },
    "ELBTimeoutThreshold": {
      "Description": "Time to wait when receiving a response from the health check (between 2 and 60 seconds).",
      "Type": "Number",
      "Default": "5",
      "MinValue": "2",
      "MaxValue": "60",
      "ConstraintDescription": "Must be an integer from 2 to 60."
    },
    "High500sThreshold": {
      "Description": "Sum of 500s threshold for scaling up EC2 instances in ASG.",
      "Type": "Number",
      "Default": "10000",
      "MinValue": "1"
    },
    "High500sPeriod": {
      "Description": "The time over which the specified statistic is applied. You must specify a time in seconds that is also a multiple of 60.",
      "Type": "Number",
      "Default": "60",
      "MinValue": "60",
      "ConstraintDescription": "Must be an integer that is a multiple of 60."
    },
    "IAMInstanceProfile": {
      "Description":"ARN of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.",
      "Type":"String",
      "Default":""
    },
    "InstanceSubnetList": {
      "Description":"A list of subnet IDs in your VPC to attach to your EC2 instances.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "InstanceSecurityGroups": {
      "Description": "A list of security groups assigned to EC2 instances in the ASG.",
      "Type": "String",
      "Default": ""
    },
    "ELBSubnetList": {
      "Description":"A list of subnet IDs in your VPC to attach to your ELB. (If this is an Internet-facing ELB, these must be public subnets)",
      "Type":"List<AWS::EC2::Subnet::Id>"
    },
    "ELBSecurityGroups": {
      "Description":"A list of security groups assigned to the ELB.",
      "Type":"String",
      "Default":""
    },
    "CloudWatchAlarmSNSTopic": {
      "Description": "SNS topic to send AutoScaling Events to.",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a string."
    },
    "EC2KeyPair": {
      "Description": "Name of the EC2 key pair assigned to instances in the ASG.",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be an existing EC2 key pair."
    },
    "BootstrapS3BucketName": {
      "Description": "The name of the S3 bucket containing provision/bootstrap scripts to be executed within UserData.",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a string."
    },
    "ChefS3BucketName": {
      "Description": "The name of the S3 bucket containing chef to be executed within UserData.",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a string."
    },
    "Project": {
      "Description": "Project name.",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a string."
    },
    "HostedZoneName": {
      "Description": "FQDN of the domain you want to add record to",
      "Type": "String",
      "Default": ""
    },
    "PublicDomain": {
      "Description": "Public Domain Name",
      "Type": "String",
      "Default": ""
    },
    "PrivateDomain": {
      "Description": "Public Domain Name",
      "Type": "String",
      "Default": ""
    },
    "TerminationPolicy": {
      "Description": "Termination Policy for our ELBs",
      "Type": "String",
      "Default": "Default",
      "AllowedValues": [ "NewestInstance", "ClosestToNextInstanceHour", "OldestInstance", "OldestLaunchConfiguration", "Default" ]
    }
  },

  "Mappings": {
  },

  "Conditions": {

    "MultiAZCondition": { "Fn::Equals": [ { "Ref": "IsMultiAZStack" }, "True"] },
    "ELBInternalCondition": { "Fn::Equals": [ { "Ref": "IsELBInternal" }, "False"] },
    "ELBListenerCondition": { "Fn::Equals": [ { "Ref": "ELBListenerProtocol2" }, ""] },
    "UseCookieStickinessPolicy": { "Fn::Equals": [ { "Ref": "UseELBCookieStickinessPolicy" }, "True"] },
    "UseSSLCertificate": { "Fn::Equals": [ { "Ref": "ELBListenerCert" }, ""] },
    "UseSSLCertificate2": { "Fn::Equals": [ { "Ref": "ELBListenerCert2" }, ""] }

  },

  "Resources": {

    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": {
          "Fn::Join": [
            "",
            [ { "Ref": "Environment" }, "-", { "Ref": "Role" } ]
          ]
        },
        "CrossZone": "True",
        "ConnectionDrainingPolicy": {
          "Enabled" : "True",
          "Timeout" : { "Ref": "ELBConnectionDrainingTimeout" }
        },
        "Scheme": {
          "Fn::If": [
            "ELBInternalCondition",
            "internet-facing",
            "internal"
          ]
        },
        "SecurityGroups": [
          { "Ref": "ELBSecurityGroups" }
        ],
        "Subnets": { "Ref": "ELBSubnetList" },
        "LBCookieStickinessPolicy" : {
          "Fn::If" : [
            "UseCookieStickinessPolicy",
            [
              {
                "PolicyName": "ELBPolicy",
                "CookieExpirationPeriod": { "Ref": "ELBStickySessionLength" }
              }
            ],
            { "Ref" : "AWS::NoValue" }
          ]
        },
        "Listeners": {
          "Fn::If": [
            "ELBListenerCondition",
              [
                {
                  "InstancePort": { "Ref": "InstanceListenerPort" },
                  "InstanceProtocol": { "Ref": "InstanceListenerProtocol" },
                  "LoadBalancerPort": { "Ref": "ELBListenerPort" },
                  "PolicyNames": {
                    "Fn::If": [
                      "UseCookieStickinessPolicy",
                      ["ELBPolicy"],
                      { "Ref" : "AWS::NoValue" }
                    ]
                  },
                  "Protocol": { "Ref": "ELBListenerProtocol" },
                  "SSLCertificateId": {
                    "Fn::If": [
                      "UseSSLCertificate",
                      { "Ref" : "AWS::NoValue" },
                      { "Ref": "ELBListenerCert" }
                    ]
                  }
                }
              ],
              [
                {
                  "InstancePort": { "Ref": "InstanceListenerPort" },
                  "InstanceProtocol": { "Ref": "InstanceListenerProtocol" },
                  "LoadBalancerPort": { "Ref": "ELBListenerPort" },
                  "PolicyNames": {
                    "Fn::If": [
                      "UseCookieStickinessPolicy",
                      ["ELBPolicy"],
                      { "Ref" : "AWS::NoValue" }
                    ]
                  },
                  "Protocol": { "Ref": "ELBListenerProtocol" },
                  "SSLCertificateId": {
                    "Fn::If": [
                      "UseSSLCertificate",
                      { "Ref" : "AWS::NoValue" },
                      { "Ref": "ELBListenerCert" }
                    ]
                  }
                },
                {
                  "InstancePort": { "Ref": "InstanceListenerPort2" },
                  "InstanceProtocol": { "Ref": "InstanceListenerProtocol2" },
                  "LoadBalancerPort": { "Ref": "ELBListenerPort2" },
                  "PolicyNames": {
                    "Fn::If": [
                      "UseCookieStickinessPolicy",
                      ["ELBPolicy"],
                      { "Ref" : "AWS::NoValue" }
                    ]
                  },
                  "Protocol": { "Ref": "ELBListenerProtocol2" },
                  "SSLCertificateId": {
                    "Fn::If": [
                      "UseSSLCertificate2",
                      { "Ref" : "AWS::NoValue" },
                      { "Ref": "ELBListenerCert2" }
                    ]
                  }
                }
              ]
          ]
        },
        "HealthCheck": {
          "Target": { "Ref": "HealthCheckTarget" },
          "HealthyThreshold": { "Ref": "ELBHealthyThreshold" },
          "UnhealthyThreshold": { "Ref": "ELBUnhealthyThreshold" },
          "Interval": { "Ref": "ELBIntervalThreshold" },
          "Timeout": { "Ref": "ELBTimeoutThreshold" }
        },
        "Tags": [
          {
            "Key": "project",
            "Value": { "Ref": "Project" }
          },
          {
            "Key": "release",
            "Value": { "Ref": "Release" }
          },
          {
            "Key": "environment",
            "Value": { "Ref": "Environment" }
          },
          {
            "Key": "role",
            "Value": { "Ref": "Role" }
          }
        ]
      },
      "DependsOn": []
    },
    "ASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": { "Ref": "RollingUpdateMinInstancesInService" },
            "MaxBatchSize": { "Ref": "RollingUpdateMaxBatchSize" },
            "PauseTime": { "Ref": "RollingUpdatePauseTime" }
          }
        },
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "InstanceSubnetList" },
        "LaunchConfigurationName": { "Ref": "ASGLaunchConfig" },
        "HealthCheckType": { "Ref": "ASGHealthCheckType" },
        "HealthCheckGracePeriod": { "Ref": "HealthCheckGracePeriod" },
        "MaxSize": { "Ref": "MaxInstancesCount" },
        "MinSize": { "Ref": "MinInstancesCount" },
        "LoadBalancerNames": [ { "Ref": "ELB" } ],
        "TerminationPolicies": [ { "Ref": "TerminationPolicy" } ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [ { "Ref": "Environment" }, "-", { "Ref": "Role" }, "-ASG" ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "project",
            "Value": { "Ref": "Project" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "release",
            "Value": { "Ref": "Release" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "environment",
            "Value": { "Ref": "Environment" },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "role",
            "Value": { "Ref": "Role" },
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "DependsOn": []
    },
    "ASGLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": { "Ref": "AssociatePublicIPAddress" },
        "ImageId": { "Ref": "AMI" },
        "KeyName": { "Ref": "EC2KeyPair" },
        "IamInstanceProfile": { "Ref": "IAMInstanceProfile" },
        "SecurityGroups": [ { "Ref": "InstanceSecurityGroups" } ],
        "InstanceType": { "Ref": "InstanceType" },
        "UserData": {
          "Fn::Base64": { "Fn::Join": ["", [
            "#!/usr/bin/env bash\n",
            "export PROJECT=", { "Ref" : "Project" }, "\n",
            "export ROLE=", { "Ref" : "Role" }, "\n",
            "export ENV=", { "Ref" : "Environment" }, "\n",
            "export SNS_TOPIC=", { "Ref" : "CloudWatchAlarmSNSTopic" }, "\n",
	    "if [ $(which apt-get) ] ; then", "\n",
	    "export DEBIAN_FRONTEND=noninteractive", "\n",
	    "apt-get update", "\n",
	    "apt-get -y install python-pip", "\n",
	    "elif [ $(which yum) ] ; then", "\n",
            "yum install epel-release -y", "\n",
	    "yum makecache fast", "\n",
	    "yum -y install python-pip", "\n",
	    "fi", "\n",
            "rm -rf /tmp/pip_build_root", "\n",
	    "pip install --upgrade awscli", "\n",
            "aws s3 cp s3://", { "Ref" : "BootstrapS3BucketName" }, "/", { "Ref": "BootstrapFileName" },
              " /usr/local/bin/", { "Ref" : "BootstrapFileName" },
              " --region ", { "Ref" : "AWS::Region" }, " \n",
            "chmod 770 /usr/local/bin/", { "Ref" : "BootstrapFileName" }, " \n",
            "/usr/local/bin/", { "Ref": "BootstrapFileName" },
              " -b ", { "Ref": "BootstrapS3BucketName" },
              " -c ", { "Ref": "ChefS3BucketName" },
              " -n ", { "Ref": "Role" },
              " -p ", { "Ref": "Project" },
              " -e ", { "Ref": "Environment" },
              " -r ", { "Ref": "Release" },
              " -u ", { "Ref": "PublicDomain" },
              " -t ", { "Ref": "PrivateDomain" },
              " -s ", { "Ref": "CloudWatchAlarmSNSTopic" }, " \n"
          ] ] }
        }
      }
    },
    "CloudWatchAlarmEC2Status": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "EC2 Health Check Status Alarm",
        "MetricName": "StatusCheckFailed",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "1",
        "AlarmActions": [ { "Ref": "CloudWatchAlarmSNSTopic" } ],
        "OKActions": [],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "ASG" }
          }
        ],
        "ComparisonOperator": "GreaterThanOrEqualToThreshold"
      }
    },
    "CloudWatchAlarmHighCPU": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "High CPU",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": { "Ref": "HighCPUPeriod" },
        "EvaluationPeriods": "1",
        "Threshold": { "Ref": "HighCPUThreshold" },
        "AlarmActions": [ { "Ref": "ScaleUpPolicy" }, { "Ref": "CloudWatchAlarmSNSTopic" } ],
        "OKActions": [],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "ASG" }
          }
        ],
        "ComparisonOperator": "GreaterThanOrEqualToThreshold"
      }
    },
    "CloudWatchAlarmLowCPU": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Low CPU",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": { "Ref": "LowCPUPeriod" },
        "EvaluationPeriods": "1",
        "Threshold": { "Ref": "LowCPUThreshold" },
        "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
        "OKActions": [],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "ASG" }
          }
        ],
        "ComparisonOperator": "LessThanOrEqualToThreshold"
      }
    },
    "CloudWatchAlarm500sHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "High 500s Count",
        "MetricName": "HTTPCode_Backend_5XX",
        "Namespace": "AWS/ELB",
        "Statistic": "Sum",
        "Period": { "Ref": "High500sPeriod" },
        "EvaluationPeriods": "1",
        "Threshold": { "Ref": "High500sThreshold" },
        "AlarmActions": [ { "Ref": "CloudWatchAlarmSNSTopic" } ],
        "OKActions": [],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ELB" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "ASG" },
        "Cooldown": { "Ref": "ScaleUpCooldown" },
        "ScalingAdjustment": { "Ref": "ScaleUpAdjustment" }
      }
    },
    "ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "ASG" },
        "Cooldown": { "Ref": "ScaleDownCooldown" },
        "ScalingAdjustment": { "Ref": "ScaleDownAdjustment" }
      }
    },
    "Route53Record" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : { "Fn::Join" : [ "", [ { "Ref": "HostedZoneName" }, "." ]] },
        "Comment" : { "Fn::Join" : [ "", [ "DNS name for ", { "Ref": "Role" }, " in ", { "Ref": "Environment" } ]]},
        "Name" : { "Fn::Join" : [ "", [ { "Ref": "Role" }, ".", { "Ref": "Environment" }, ".", { "Ref": "AWS::Region"}, ".", { "Ref": "HostedZoneName" }, "." ] ] },
        "Type" : "A",
        "AliasTarget": {
          "DNSName": { "Fn::GetAtt": [ "ELB", "DNSName" ] },
          "EvaluateTargetHealth": "False",
          "HostedZoneId": { "Fn::GetAtt": [ "ELB", "CanonicalHostedZoneNameID" ] }
        }
      }
    }

  },

  "Outputs": {
    "DNSEndpoint": {
      "Description": "Consumable Endpoint in Route53",
      "Value": { "Fn::Join" : [ "", [ { "Ref": "Role" }, ".", { "Ref": "Environment" }, ".", { "Ref": "AWS::Region"}, ".", { "Ref": "HostedZoneName" }, "." ] ] }
    },
    "ELBCanonicalHostedZoneName": {
      "Condition": "ELBInternalCondition",
      "Value": { "Fn::GetAtt": [ "ELB", "CanonicalHostedZoneName" ] }
    },
    "ELBCanonicalHostedZoneNameID": {
      "Condition": "ELBInternalCondition",
      "Value": { "Fn::GetAtt": [ "ELB", "CanonicalHostedZoneNameID" ] }
    },
    "ELBDNSName": {
      "Value": { "Fn::GetAtt": [ "ELB", "DNSName" ] }
    },
    "ELBSourceSecurityGroupGroupName": {
      "Value": { "Fn::GetAtt": [ "ELB", "SourceSecurityGroup.GroupName" ] }
    },
    "ELBSourceSecurityGroupOwnerAlias": {
      "Value": { "Fn::GetAtt": [ "ELB", "SourceSecurityGroup.OwnerAlias" ] }
    }

  }

}
